hou_buff %>%
mutate(Created = as_datetime(Created))
# Convert UNIX time to regular time stamp
hou_buff = hou_buff %>%
mutate(Created = as_datetime(Created))
library(tidytext)
install.packages("tidytext")
library(tidytext)
# Calculate sentiment
hou_buff_sentiment = hou_buff %>%
unnest_tokens(Body, text)
# Convert UNIX time to regular time stamp
hou_buff = tibble(hou_buff %>%
mutate(Created = as_datetime(Created)))
View(hou_buff)
# Convert UNIX time to regular time stamp
hou_buff = hou_buff %>%
mutate(Created = as_datetime(Created)) %>%
tibble()
# Houston vs Buffalo
hou_buff = read.csv("data/hou_buff.csv")
# Convert UNIX time to regular time stamp
hou_buff = hou_buff %>%
mutate(Created = as_datetime(Created)) %>%
tibble()
# Calculate sentiment
hou_buff_sentiment = hou_buff %>%
unnest_tokens(Body, text)
# Houston vs Buffalo
hou_buff = read.csv("data/hou_buff.csv")
# Convert UNIX time to regular time stamp
hou_buff = hou_buff %>%
mutate(Created = as_datetime(Created))
# Calculate sentiment
hou_buff_sentiment = hou_buff %>%
unnest_tokens(Body, text)
# Calculate sentiment
hou_buff_sentiment = hou_buff %>%
select(Score, Created, Body) %>%
unnest_tokens(Body, text)
# Houston vs Buffalo
hou_buff = read.csv("data/hou_buff.csv")
# Convert UNIX time to regular time stamp
hou_buff = hou_buff %>%
mutate(Created = as_datetime(Created)) %>%
select(Score, Created, Body)
View(hou_buff)
hou_buff = tibble(hou_buff)
View(hou_buff)
# Calculate sentiment
hou_buff_sentiment = hou_buff %>%
select(Score, Created, Body) %>%
unnest_tokens(Body, text)
# Calculate sentiment
hou_buff_sentiment = hou_buff %>%
unnest_tokens(Body, text)
# Calculate sentiment
hou_buff_sentiment = hou_buff %>%
unnest_tokens(word, hou_buff.Body)
hou_buff$hou_buff
hou_buff
hou_buff = as_tibble(hou_buff)
View(hou_buff)
# Houston vs Buffalo
hou_buff = read.csv("data/hou_buff.csv")
# Convert UNIX time to regular time stamp
hou_buff = hou_buff %>%
mutate(Created = as_datetime(Created)) %>%
select(Score, Created, Body)
hou_buff = as_tibble(hou_buff)
hou_buff
# Calculate sentiment
hou_buff_sentiment = hou_buff %>%
unnest_tokens(word, hou_buff.Body)
# Calculate sentiment
hou_buff_sentiment = hou_buff %>%
unnest_tokens(word, Body)
# Calculate sentiment
hou_buff_sentiment = hou_buff %>%
unnest_tokens_(word, Body)
# Houston vs Buffalo
hou_buff = read.csv("data/hou_buff.csv", stringsAsFactors = FALSE)
# Convert UNIX time to regular time stamp
hou_buff = hou_buff %>%
mutate(Created = as_datetime(Created)) %>%
select(Score, Created, Body)
hou_buff = as_tibble(hou_buff)
# Calculate sentiment
hou_buff_sentiment = hou_buff %>%
unnest_tokens(word, Body)
View(hou_buff_sentiment)
# Calculate sentiment
hou_buff_sentiment = hou_buff %>%
unnest_tokens(word, Body) %>%
anti_join(get_stopwords())
# Calculate sentiment
hou_buff_sentiment = hou_buff %>%
unnest_tokens(word, Body) %>%
anti_join(get_stopwords()) %>%
inner_join(get_sentiments("bing")) %>%
spread(sentiment, n, fill = 0) %>%
mutate(sentiment = positive - negative)
?count
# Calculate sentiment
hou_buff_sentiment = hou_buff %>%
unnest_tokens(word, Body) %>%
anti_join(get_stopwords()) %>%
inner_join(get_sentiments("bing")) %>%
()
# Calculate sentiment
hou_buff_sentiment = hou_buff %>%
unnest_tokens(word, Body) %>%
anti_join(get_stopwords()) %>%
inner_join(get_sentiments("bing"))
hou_buff_sentiment = hou_buff_sentiment %>%
anti_join(get_stopwords()) %>%
inner_join(get_sentiments("bing"))
# Calculate sentiment
hou_buff_sentiment = hou_buff %>%
unnest_tokens(word, Body)
hou_buff_sentiment = hou_buff_sentiment %>%
anti_join(get_stopwords()) %>%
inner_join(get_sentiments("bing"))
my_stop_words <- tibble(
word = c(
"https",
"t.co",
"rt",
"amp",
"rstats",
"gt"
),
lexicon = "twitter"
)
View(my_stop_words)
stop_words
View(hou_buff)
# Calculate sentiment
hou_buff_sentiment = hou_buff %>%
unnest_tokens(word, Body)
hou_buff_sentiment %>%
count(word, sort = TRUE)
word_count = hou_buff_sentiment %>%
count(word, sort = TRUE)
View(word_count)
hou_buff_sentiment = hou_buff_sentiment %>%
anti_join(get_stopwords()) %>%
inner_join(get_sentiments("bing"))
my_stop_words <- tibble(
word = c(
"https",
"fucking",
"fuck",
"shit"
),
lexicon = "reddit"
)
all_stop_words <- stop_words %>%
bind_rows(my_stop_words)
hou_buff_sentiment = hou_buff_sentiment %>%
anti_join(all_stop_words) %>%
inner_join(get_sentiments("bing"))
# Convert UNIX time to regular time stamp
hou_buff = hou_buff %>%
mutate(Created = floor_date(hms(as_datetime(Created))), unit = "minute") %>%
select(Score, Created, Body)
# Convert UNIX time to regular time stamp
hou_buff = hou_buff %>%
mutate(Created = floor_date(as.hms(as_datetime(Created))), unit = "minute") %>%
select(Score, Created, Body)
# Convert UNIX time to regular time stamp
hou_buff = hou_buff %>%
mutate(Created = floor_date(hms(as_datetime(Created))), unit = "minute") %>%
select(Score, Created, Body)
# Convert UNIX time to regular time stamp
hou_buff = hou_buff %>%
mutate(Created = floor_date(time(as_datetime(Created))), unit = "minute") %>%
select(Score, Created, Body)
library(anytime)
install.packages("anytime")
library(anytime)
# Convert UNIX time to regular time stamp
hou_buff = hou_buff %>%
mutate(Created = floor_date(strftime(as_datetime(Created))m format="%H:%M:%S"), unit = "minute") %>%
select(Score, Created, Body)
# Convert UNIX time to regular time stamp
hou_buff = hou_buff %>%
mutate(Created = floor_date(strftime(as_datetime(Created)), format="%H:%M:%S"), unit = "minute") %>%
select(Score, Created, Body)
# Convert UNIX time to regular time stamp
hou_buff = hou_buff %>%
mutate(Created = floor_date(strftime(as_datetime(Created), format="%H:%M:%S")), unit = "minute") %>%
select(Score, Created, Body)
hou_buff$Created[1]
# Convert UNIX time to regular time stamp
hou_buff = hou_buff %>%
mutate(Created = floor_date(as_datetime(Created)), unit = "minute") %>%
mutate(Created = strftime(Created, format="%H:%M:%S")) %>%
select(Score, Created, Body)
hou_buff = hou_buff %>%
mutate(Created = floor_date(as_datetime(Created)), unit = "minute")
# Houston vs Buffalo
hou_buff = read.csv("data/hou_buff.csv", stringsAsFactors = FALSE)
hou_buff = hou_buff %>%
mutate(Created = floor_date(as_datetime(Created)), unit = "minute")
# Houston vs Buffalo
hou_buff = read.csv("data/hou_buff.csv", stringsAsFactors = FALSE)
hou_buff$Created[1]
as_datetime(hou_buff$Created[1])
floor_date(as_datetime(hou_buff$Created[1]), unit = "minute")
strftime(floor_date(as_datetime(hou_buff$Created[1]), unit = "minute"), format="%H:%M:%S")
# Houston vs Buffalo
hou_buff = read.csv("data/hou_buff.csv", stringsAsFactors = FALSE)
# Convert UNIX time to regular time stamp
hou_buff = hou_buff %>%
mutate(Created = floor_date(as_datetime(Created)), unit = "minute") %>%
mutate(Created = strftime(Created, format="%H:%M:%S")) %>%
select(Score, Created, Body)
# Convert UNIX time to regular time stamp
hou_buff = hou_buff %>%
mutate(Created = strftime(floor_date(as_datetime(Created)), unit = "minute"), format="%H:%M:%S") %>%
mutate(Created = strftime(Created, format="%H:%M:%S")) %>%
select(Score, Created, Body)
# Houston vs Buffalo
hou_buff = read.csv("data/hou_buff.csv", stringsAsFactors = FALSE)
# Convert UNIX time to regular time stamp
hou_buff = hou_buff %>%
mutate(Created = strftime(floor_date(as_datetime(Created)), unit = "minute"), format="%H:%M:%S") %>%
mutate(Created = strftime(Created, format="%H:%M:%S")) %>%
select(Score, Created, Body)
# Houston vs Buffalo
hou_buff = read.csv("data/hou_buff.csv", stringsAsFactors = FALSE)
# Convert UNIX time to regular time stamp
hou_buff = hou_buff %>%
mutate(Created = strftime(floor_date(as_datetime(Created)), unit = "minute"), format="%H:%M:%S") %>%
select(Score, Created, Body)
# Houston vs Buffalo
hou_buff = read.csv("data/hou_buff.csv", stringsAsFactors = FALSE)
# Convert UNIX time to regular time stamp
hou_buff = hou_buff %>%
mutate(Created = floor_date(as_datetime(Created)), unit = "minute") %>%
select(Score, Created, Body)
hou_buff = hou_buff %>%
mutate(Created = strftime(Created, format="%H:%M:%S"))
hou_buff = as_tibble(hou_buff)
hou_buff
hou_buff = hou_buff %>%
mutate(Created = strftime(Created, format="%H:%M:%S")) %>%
mutate(Created = hms(Created))
# Houston vs Buffalo
hou_buff = read.csv("data/hou_buff.csv", stringsAsFactors = FALSE)
# Convert UNIX time to regular time stamp
hou_buff = hou_buff %>%
mutate(Created = floor_date(as_datetime(Created)), unit = "minute") %>%
select(Score, Created, Body)
hou_buff = hou_buff %>%
mutate(Created = strftime(Created, format="%H:%M:%S")) %>%
mutate(Created = hms(Created))
# Convert UNIX time to regular time stamp
hou_buff = hou_buff %>%
mutate(Created = floor_date(as_datetime(Created)), unit = "minute") %>%
select(Score, Created, Body)
# Convert UNIX time to regular time stamp
hou_buff = hou_buff %>%
mutate(Created = floor_date(as_datetime(Created)), unit = "minute") %>%
select(Score, Created, Body)
# Houston vs Buffalo
hou_buff = read.csv("data/hou_buff.csv", stringsAsFactors = FALSE)
# Convert UNIX time to regular time stamp
hou_buff = hou_buff %>%
mutate(Created = floor_date(as_datetime(Created)), unit = "minute") %>%
select(Score, Created, Body)
hou_buff = hou_buff %>%
mutate(Created = strftime(Created, format="%H:%M:%S")) %>%
mutate(Created = as_hms(Created))
hou_buff = as_tibble(hou_buff)
# Houston vs Buffalo
hou_buff = read.csv("data/hou_buff.csv", stringsAsFactors = FALSE)
# Convert UNIX time to regular time stamp
hou_buff = hou_buff %>%
mutate(Created = floor_date(as_datetime(Created)), unit = "minute") %>%
select(Score, Created, Body)
hou_buff = as_tibble(hou_buff)
# Calculate sentiment
hou_buff_sentiment = hou_buff %>%
unnest_tokens(word, Body)
word_count = hou_buff_sentiment %>%
count(word, sort = TRUE)
my_stop_words <- tibble(
word = c(
"https",
"fucking",
"fuck",
"shit"
),
lexicon = "reddit"
)
all_stop_words <- stop_words %>%
bind_rows(my_stop_words)
hou_buff_sentiment = hou_buff_sentiment %>%
anti_join(all_stop_words) %>%
inner_join(get_sentiments("bing"))
View(hou_buff_sentiment)
# Houston vs Buffalo
hou_buff = read.csv("data/hou_buff.csv", stringsAsFactors = FALSE)
# Convert UNIX time to regular time stamp
hou_buff = hou_buff %>%
mutate(Created = floor_date(as_datetime(Created)), unit = "minute") %>%
select(Score, Created, Body)
hou_buff %>%
mutate(Created = floor_date(as_datetime(Created)), unit = "minute") %>%
select(Score, Created, Body)
# Convert UNIX time to regular time stamp
hou_buff = hou_buff %>%
mutate(Created = floor_date(as_datetime(Created)), unit = "minute") %>%
select(Score, Created, Body)
hou_buff %>%
mutate(Created = floor_date(as_datetime(Created)), unit = "minute") %>%
select(Score, Created, Body)
# Convert UNIX time to regular time stamp
hou_buff = hou_buff %>%
mutate(Created = floor_date(as_datetime(Created), unit = "minute")) %>%
select(Score, Created, Body)
hou_buff = as_tibble(hou_buff)
# Calculate sentiment
hou_buff_sentiment = hou_buff %>%
unnest_tokens(word, Body)
word_count = hou_buff_sentiment %>%
count(word, sort = TRUE)
my_stop_words <- tibble(
word = c(
"https",
"fucking",
"fuck",
"shit"
),
lexicon = "reddit"
)
all_stop_words <- stop_words %>%
bind_rows(my_stop_words)
hou_buff_sentiment = hou_buff_sentiment %>%
anti_join(all_stop_words) %>%
inner_join(get_sentiments("bing"))
hou_buff_sentiment = hou_buff_sentiment %>%
anti_join(all_stop_words) %>%
inner_join(get_sentiments("bing")) %>%
mutate(score = ifelse(sentiment == "positive", 1, 0)) %>%
group_by(Created) %>%
summarize(sent_total = sum(sentiment, na.rm = TRUE))
hou_buff_sentiment = hou_buff_sentiment %>%
anti_join(all_stop_words) %>%
inner_join(get_sentiments("bing")) %>%
mutate(score = ifelse(sentiment == "positive", 1, 0)) %>%
group_by(Created) %>%
summarize(sent_total = sum(score, na.rm = TRUE))
hou_buff_sentiment %>%
ggplot(aes(x=Created, y=sent_total)) +
geom_line()
hou_buff_sentiment = hou_buff_sentiment %>%
anti_join(all_stop_words) %>%
inner_join(get_sentiments("bing")) %>%
mutate(score = ifelse(sentiment == "positive", 1, -1)) %>%
group_by(Created) %>%
summarize(sent_total = sum(score, na.rm = TRUE))
hou_buff_sentiment %>%
ggplot(aes(x=Created, y=sent_total)) +
geom_line()
# Calculate sentiment
hou_buff_sentiment = hou_buff %>%
unnest_tokens(word, Body)
word_count = hou_buff_sentiment %>%
count(word, sort = TRUE)
# Houston vs Buffalo
hou_buff = read.csv("data/hou_buff.csv", stringsAsFactors = FALSE)
# Convert UNIX time to regular time stamp
hou_buff = hou_buff %>%
mutate(Created = floor_date(as_datetime(Created), unit = "minute")) %>%
select(Score, Created, Body)
hou_buff = as_tibble(hou_buff)
# Calculate sentiment
hou_buff_sentiment = hou_buff %>%
unnest_tokens(word, Body)
word_count = hou_buff_sentiment %>%
count(word, sort = TRUE)
my_stop_words <- tibble(
word = c(
"https",
"fucking",
"fuck",
"shit"
),
lexicon = "reddit"
)
all_stop_words <- stop_words %>%
bind_rows(my_stop_words)
hou_buff_sentiment = hou_buff_sentiment %>%
anti_join(all_stop_words) %>%
inner_join(get_sentiments("bing")) %>%
mutate(score = ifelse(sentiment == "positive", 1, -1)) %>%
group_by(Created) %>%
summarize(sent_total = sum(score, na.rm = TRUE))
hou_buff_sentiment %>%
ggplot(aes(x=Created, y=sent_total)) +
geom_line()
hou_buff_risky = risky %>%
filter(game_id = 2020010400)
hou_buff_risky = risky %>%
filter(game_id == 2020010400)
View(hou_buff_risky)
hou_buff_risky = risky %>%
filter(game_id == 2020010400) %>%
mutate(time = hms(time))
hou_buff_risky = risky %>%
filter(game_id == 2020010400) %>%
mutate(time = as.hms(time))
hou_buff_risky = risky %>%
filter(game_id == 2020010400) %>%
mutate(time = hms::as.hms(time))
hou_buff_risky = risky %>%
filter(game_id == 2020010400) %>%
mutate(time = as_hms(time))
hou_buff_risky = risky %>%
filter(game_id == 2020010400) %>%
mutate(time = hms::as_hms(time))
# Plot sentiment over time, overlay with risky plays
hou_buff_sentiment %>%
ggplot(aes(x=Created, y=sent_total)) +
geom_line() +
geom_vline(hou_buff_risky, aes(x=time))
# Plot sentiment over time, overlay with risky plays
hou_buff_sentiment %>%
ggplot(aes(x=Created, y=sent_total)) +
geom_line() +
geom_vline(hou_buff_risky, aes(x = time))
# Plot sentiment over time, overlay with risky plays
hou_buff_sentiment %>%
ggplot(aes(x=Created, y=sent_total)) +
geom_line() +
geom_vline(hou_buff_risky, aes(xintercept = time))
# Plot sentiment over time, overlay with risky plays
hou_buff_sentiment %>%
ggplot(aes(x=Created, y=sent_total)) +
geom_line() +
geom_vline(data = hou_buff_risky, aes(xintercept = time))
hou_buff_risky = risky %>%
filter(game_id == 2020010400) %>%
mutate(time = mdy_hm(paste(game_date, time)))
hou_buff_risky = risky %>%
filter(game_id == 2020010400) %>%
mutate(time = ymd_hm(paste(game_date, time)))
hou_buff_risky = risky %>%
filter(game_id == 2020010400) %>%
mutate(time = ymd_hms(paste(game_date, time)))
hou_buff_risky = risky %>%
filter(game_id == 2020010400) %>%
mutate(time = ymd_hms(paste(game_date, time)))
# Plot sentiment over time, overlay with risky plays
hou_buff_sentiment %>%
ggplot(aes(x=Created, y=sent_total)) +
geom_line() +
geom_vline(data = hou_buff_risky, aes(xintercept = time))
hou_buff_risky = risky %>%
filter(game_id == 2020010400) %>%
mutate(time = ydm_hms(paste(game_date, time)))
# Plot sentiment over time, overlay with risky plays
hou_buff_sentiment %>%
ggplot(aes(x=Created, y=sent_total)) +
geom_line() +
geom_vline(data = hou_buff_risky, aes(xintercept = time))
# Houston vs Buffalo
hou_buff = read.csv("data/hou_buff.csv", stringsAsFactors = FALSE)
# Convert UNIX time to regular time stamp
hou_buff = hou_buff %>%
mutate(Created = floor_date(as_datetime(Created), unit = "minute")) %>%
select(Score, Created, Body)
hou_buff = as_tibble(hou_buff)
# Calculate sentiment
hou_buff_sentiment = hou_buff %>%
unnest_tokens(word, Body)
word_count = hou_buff_sentiment %>%
count(word, sort = TRUE)
my_stop_words <- tibble(
word = c(
"https",
"fucking",
"fuck",
"shit"
),
lexicon = "reddit"
)
all_stop_words <- stop_words %>%
bind_rows(my_stop_words)
hou_buff_sentiment = hou_buff_sentiment %>%
anti_join(all_stop_words) %>%
inner_join(get_sentiments("bing")) %>%
mutate(score = ifelse(sentiment == "positive", 1, -1)) %>%
group_by(Created) %>%
summarize(sent_total = sum(score, na.rm = TRUE))
hou_buff_risky = risky %>%
filter(game_id == 2020010400) %>%
mutate(time = ydm_hms(paste(game_date, time)))
# Plot sentiment over time, overlay with risky plays
hou_buff_sentiment %>%
ggplot(aes(x=Created, y=sent_total)) +
geom_line() +
geom_vline(data = hou_buff_risky, aes(xintercept = time))
hou_buff_risky = risky %>%
filter(game_id == 2020010400)
View(post)
test = post %>%
filter(game_id == 2020010400)
View(test)
